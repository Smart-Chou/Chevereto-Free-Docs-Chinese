import{r as o,o as d,c,a as e,b as s,F as r,e as n,d as t}from"./app.292a7b1f.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const l={},p=n(`<h1 id="popup-upload-plugin" tabindex="-1"><a class="header-anchor" href="#popup-upload-plugin" aria-hidden="true">#</a> Popup Upload Plugin</h1><p>The popup upload plugin (PUP) is a small file that allows to provide external image uploading via a small JavaScript file.</p><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><p>When PUP is enabled, the route <code>/plugin</code> shows the instructions in how to add image uploading functionality to other websites.</p></div><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How it works</h2><p>PUP binds user-editable content with an upload button that will trigger an image upload dialog and it will auto handle the codes needed for image insertion. End-users will experience a fluid and neat process without leaving the original website.</p><h2 id="supported-devices" tabindex="-1"><a class="header-anchor" href="#supported-devices" aria-hidden="true">#</a> Supported devices</h2><p>PUP should work in any modern web browser (HTML 5) regardless of the user device (that includes mobile devices). It has been tested and confirmed to work on Windows, Mac, Linux and Android (Chrome).</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Basic installation is easy as copy the following code into any HTML section of the target website. You can add custom options right on this code.</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//demo.chevereto.com/sdk/pup.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://demo.chevereto.com/upload<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Note:</strong> You need to edit <code>src</code> and <code>data-url</code> to match your Chevereto website.</p><p>PUP works on the DOM so it doesn&#39;t have any server-side dependencies and it can be installed on any website.</p><h2 id="customization" tabindex="-1"><a class="header-anchor" href="#customization" aria-hidden="true">#</a> Customization</h2>`,13),h=t("All plugin customizations are handled via "),u={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*",target:"_blank",rel:"noopener noreferrer"},b=t("data attributes"),m=t(" that you must add to PUP base code. As an example, to use the red color palette the code should look like this:"),g=n(`<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//demo.chevereto.com/sdk/pup.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://demo.chevereto.com/upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-palette</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>red<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This applies to all PUP options. The format is <strong>data-<em>key</em></strong> where <strong><em>key</em></strong> is the target option key, in this case the palette option is being declared as the <code>data-palette</code> attribute value.</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><p>This is the list of all the plugin key options available.</p><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> <code>url</code></h3><p>URL of the target Chevereto website.</p><table><thead><tr><th>Type</th><th>Example</th></tr></thead><tbody><tr><td>String</td><td>https://demo.chevereto.com</td></tr></tbody></table><h3 id="palette" tabindex="-1"><a class="header-anchor" href="#palette" aria-hidden="true">#</a> <code>palette</code></h3><p>Named color palette of the button or a comma-separated list of colors (HEX, RGB, etc.). When using a comma-separated list of colors, the system will bind each color to a <code>%n</code> color index (starting at <code>%1</code>) that you can use with custom CSS.</p><table><thead><tr><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>default</code> <code>clear</code> <code>turquoise</code> <code>green</code> <code>blue</code> <code>purple</code> <code>darkblue</code> <code>yellow</code> <code>orange</code> <code>red</code> <code>grey</code> <code>black</code></td><td><code>default</code></td></tr></tbody></table><h3 id="auto-insert" tabindex="-1"><a class="header-anchor" href="#auto-insert" aria-hidden="true">#</a> <code>auto-insert</code></h3><p>Embed codes to auto insert in the target editable content. Codes using <code>full</code>, <code>medium</code> or <code>thumbnail</code> will link to the image viewer page.</p><p>Use <code>0</code> to disable auto insert.</p><table><thead><tr><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>0</code> <code>viewer-links</code> <code>direct-links</code> <code>html-embed</code> <code>html-embed-full</code> <code>html-embed-medium</code> <code>html-embed-thumbnail</code> <code>bbcode-embed</code> <code>bbcode-embed-full</code> <code>bbcode-embed-medium</code> <code>bbcode-embed-thumbnail</code> <code>markdown-embed</code> <code>markdown-embed-full</code> <code>markdown-embed-medium</code> <code>markdown-embed-thumbnail</code></td><td><code>bbcode-embed-medium</code></td></tr></tbody></table><h3 id="sibling" tabindex="-1"><a class="header-anchor" href="#sibling" aria-hidden="true">#</a> <code>sibling</code></h3><p>Sibling CSS selector to use it as a reference to the DOM node where the button should be inserted. By default, the button will be placed relative to the editable content. When the sibling is defined, the plugin will search for that element and it will use it as the reference for button insertion.</p><table><thead><tr><th>Type</th><th>Example</th></tr></thead><tbody><tr><td>String</td><td><code>.sibling</code></td></tr></tbody></table><h3 id="sibling-pos" tabindex="-1"><a class="header-anchor" href="#sibling-pos" aria-hidden="true">#</a> <code>sibling-pos</code></h3><p>Position relative to the sibling to place the button.</p><table><thead><tr><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>before</code> <code>after</code></td><td><code>after</code></td></tr></tbody></table><h3 id="vendor" tabindex="-1"><a class="header-anchor" href="#vendor" aria-hidden="true">#</a> <code>vendor</code></h3><p>Named vendor string.</p><table><thead><tr><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>bbpress</code> <code>discourse</code> <code>discuz</code> <code>ipb</code> <code>mybb</code> <code>nodebb</code> <code>phpbb</code> <code>smf</code> <code>vanilla</code> <code>vbulletin</code> <code>woltlab</code> <code>xenforo</code></td><td><code>auto</code></td></tr></tbody></table><h3 id="mode" tabindex="-1"><a class="header-anchor" href="#mode" aria-hidden="true">#</a> <code>mode</code></h3><p>Plugin mode. By default, the plugin binds to any matching editor box. Use <code>manual</code> mode to explicitly insert the button and stop any automatic binding.</p><table><thead><tr><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>auto</code> <code>manual</code></td><td><code>auto</code></td></tr></tbody></table><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> <code>target</code></h3><p>CSS selector for target editable content. Use it when manually inserting the button.</p><table><thead><tr><th>Type</th><th>Example</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>.selector</code></td><td><code>auto</code></td></tr></tbody></table><h3 id="lang" tabindex="-1"><a class="header-anchor" href="#lang" aria-hidden="true">#</a> <code>lang</code></h3><p>Button language for two-letter and four-letter language codes.</p><table><thead><tr><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>ar</code> <code>cs</code> <code>de</code> <code>es</code> <code>fi</code> <code>fr</code> <code>id</code> <code>it</code> <code>ja</code> <code>nl</code> <code>pt_BR</code> <code>ru</code> <code>zh_CN</code> <code>zh_TW</code></td><td><code>auto</code></td></tr></tbody></table><h3 id="container-class" tabindex="-1"><a class="header-anchor" href="#container-class" aria-hidden="true">#</a> <code>container-class</code></h3><p>Custom button container class name. It binds <code>%cClass</code> to the template stack.</p><table><thead><tr><th>Type</th><th>Example</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>className</code></td><td><code>chevereto-pup-container</code></td></tr></tbody></table><h3 id="button-class" tabindex="-1"><a class="header-anchor" href="#button-class" aria-hidden="true">#</a> <code>button-class</code></h3><p>Custom button class name. It binds <code>%bClass</code> to the template stack.</p><table><thead><tr><th>Type</th><th>Example</th><th>Default</th></tr></thead><tbody><tr><td>String</td><td><code>className</code></td><td><code>chevereto-pup-button</code></td></tr></tbody></table><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> <code>html</code></h3><p><a href="#custom-html">Custom HTML</a>.</p><p>| Type | Example | |---|---|---| | String | <code>&lt;div&gt;Button&lt;div&gt;</code> |</p><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> <code>css</code></h3><p><a href="#custom-html">Custom HTML</a>.</p><table><thead><tr><th>Type</th><th>Example</th></tr></thead><tbody><tr><td>String</td><td><code>.div { color: red; }</code></td></tr></tbody></table><h3 id="fit-editor" tabindex="-1"><a class="header-anchor" href="#fit-editor" aria-hidden="true">#</a> <code>fit-editor</code></h3><p>A boolean indicating if the plugin should fit the button to the target editor toolbar.</p><p>When disabled, the plugin won&#39;t fit the button styling to the target editor (override valid only for supported vendors).</p><table><thead><tr><th>Type</th><th>Values</th></tr></thead><tbody><tr><td>Integer</td><td><code>0</code> <code>1</code></td></tr></tbody></table><h3 id="observe" tabindex="-1"><a class="header-anchor" href="#observe" aria-hidden="true">#</a> <code>observe</code></h3><p>CSS selector for elements that on click event will trigger sibling observation and then button insertion (live append). Useful for dynamic editors that generate editor boxes on the fly.</p><p>| Type | Example | |---|---|---| | String | <code>.selector</code> |</p><h3 id="observe-cache" tabindex="-1"><a class="header-anchor" href="#observe-cache" aria-hidden="true">#</a> <code>observe-cache</code></h3><p>A boolean indicating if a matched observed element should be cached.</p><p>When enabled, it will stop observing the matched observed element click events. Always disable observe cache if the editor is dynamically generated and not stored as a DOM node.</p><table><thead><tr><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td>Integer</td><td><code>0</code> <code>1</code></td><td><code>1</code></td></tr></tbody></table><h3 id="custom-html-and-css" tabindex="-1"><a class="header-anchor" href="#custom-html-and-css" aria-hidden="true">#</a> Custom HTML and CSS</h3><p>PUP supports template placeholders, which is a special string that PUP will convert into usable markup.</p><p>Template placeholders available:</p><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td>%x</td><td>PUP button observer (must be used to trigger button action)</td></tr><tr><td>%cClass</td><td>Container class name</td></tr><tr><td>%bClass</td><td>Button class name</td></tr><tr><td>%iClass</td><td>Icon class name</td></tr><tr><td>%iconSvg</td><td>Vector icon in the form of a ready-to-use SVG HTML tag</td></tr><tr><td>%text</td><td>Translated button text</td></tr></tbody></table><p>For custom CSS, you can also use color palette placeholders in the form of <code>%n</code> where <strong>n</strong> is the color palette index. It binds <code>%1</code>, <code>%2</code>, ..., <code>%n</code> placeholders.</p><p>Custom HTML works by indicating the template string as an option attribute. In this example, this is the custom HTML that we want to use:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">%x</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>%text<span class="token punctuation">&#39;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>%bClass<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>%iconSvg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>To use this template, simply assign <code>data-html</code> right into the plugin code:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//demo.chevereto.com/sdk/pup.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://demo.chevereto.com/upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;a %x title=<span class="token punctuation">&#39;</span>%text<span class="token punctuation">&#39;</span> class=<span class="token punctuation">&#39;</span>%bClass<span class="token punctuation">&#39;</span>&gt;%iconSvg&lt;/a&gt;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Custom CSS works exactly the same as custom HTML but it uses <code>data-button-css</code> and color palette placeholders (<code>%1</code>, <code>%2</code>, ..., <code>%n</code>). In this example, this is the custom CSS that we want to use:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>li.%cClass .%bClass{background:%1;color:%2;text-indent:unset;border-radius:3px;position:relative}li.%cClass a.%bClass:hover{background:%3;color:%4;border-color:%5}.%cClass .%bClass svg{font-size:15px;width:1em;height:1em;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);position:absolute;left:50%;top:50%;fill:currentColor}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>To use this template, simply assign <code>data-css</code> right into the plugin code:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//demo.chevereto.com/sdk/pup.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://demo.chevereto.com/upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-css</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>li.%cClass .%bClass{background:%1;color:%2;text-indent:unset;border-radius:3px;position:relative}li.%cClass a.%bClass:hover{background:%3;color:%4;border-color:%5}.%cClass .%bClass svg{font-size:15px;width:1em;height:1em;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);position:absolute;left:50%;top:50%;fill:currentColor};<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Important:</strong> For both custom HTML and CSS make sure to don&#39;t break the syntax when using quotes.</p><h3 id="manual-button-binding" tabindex="-1"><a class="header-anchor" href="#manual-button-binding" aria-hidden="true">#</a> Manual button binding</h3><p>To manually bind a button, simply create your own button make sure to add <code>data-chevereto-pup-trigger</code> and <code>data-target</code> attributes. This is an example of a manually inserted button:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">contenteditable</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-chevereto-pup-trigger</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#editor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Custom button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Manually inserted buttons get the same popup dialog functionality and binding. However, manually inserted buttons won&#39;t use any of the plugin options or templating.</p><h2 id="core-features" tabindex="-1"><a class="header-anchor" href="#core-features" aria-hidden="true">#</a> Core features</h2><p>This plugin has very neat functions and takes advantage of modern standards to provide its core functionality. These are some of the features shape the PUP core.</p><h3 id="native-javascript" tabindex="-1"><a class="header-anchor" href="#native-javascript" aria-hidden="true">#</a> Native JavaScript</h3>`,76),k=t("PUP is written in modern JavaScript standard and it doesn't require any external library or server module. The code is about 18KB and gzipped should be around just 6KB. The source is minified using "),v={href:"https://developers.google.com/closure/compiler/",target:"_blank",rel:"noopener noreferrer"},f=t("Google Closure compiler"),y=t(" but object names aren't touched so you can inspect the source and easily understand the code."),w=n('<p>It works async so it doesn&#39;t matter where you place the insertion code and it won&#39;t render block the load of the target website at all.</p><h3 id="smart-load-and-dynamic-trigger-observer" tabindex="-1"><a class="header-anchor" href="#smart-load-and-dynamic-trigger-observer" aria-hidden="true">#</a> Smart load and dynamic trigger observer</h3><p>PUP is designed to observe the DOM until the target sibling element is available and soon as that happens, it will initiate its process and it will stop any additional DOM node observation. For dynamically generated editor boxes, PUP has a complimentary load option that observes the click event on a defined selector element. Any click on that element will trigger PUP&#39;s sibling observation and it will stop soon as the sibling gets found. This allows PUP to work in static or dynamic editor boxes.</p><p>Since some dynamic editor boxes will be generated just once and then stored as DOM nodes (XenForo) and others will be always re-parsed (Discourse, NodeBB), you can indicate if PUP should cache or not the observed triggered bindings. XenForo, Discourse and NodeBB vendors are configured to observe certain selectors just in case you want to learn how this works.</p><h3 id="closure" tabindex="-1"><a class="header-anchor" href="#closure" aria-hidden="true">#</a> Closure</h3><p>The source is all wrapped in a JavaScript closure meaning that the internal variables can&#39;t be tempered. This aims to avoid hijacking via browser console exploits or DOM manipulation. This closure also grants that all the variables handled by PUP won&#39;t conflict with any of the scripts running on the target website.</p><h3 id="postmessage" tabindex="-1"><a class="header-anchor" href="#postmessage" aria-hidden="true">#</a> postMessage</h3>',7),x=t("PUP uses "),_={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",target:"_blank",rel:"noopener noreferrer"},P=t("postMessage"),C=t(" API to keep an active communication with the target Chevereto website. Options and embed codes are safely handled using this API which restricts the origin of the posted messagese and on top of that, PUP validates each message to ensure that there's no tempering on those either. PUP will only listen to messages from the target Chevereto website."),T=e("h3",{id:"multiple-instances",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#multiple-instances","aria-hidden":"true"},"#"),t(" Multiple instances")],-1),S=t("PUP supports multiple unlimited instances. You can cast multiple buttons at the same time and all instance ids are referenced using the "),q={href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",target:"_blank",rel:"noopener noreferrer"},U=t("GUID algorithm"),M=t("."),D=e("h3",{id:"template-cache",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#template-cache","aria-hidden":"true"},"#"),t(" Template cache")],-1),I=e("p",null,"PUP will cache the button template so it won't unnecessarily re-process the template placeholders. This grants super fast performance even in multiple instances.",-1);function B(L,j){const a=o("ExternalLinkIcon");return d(),c(r,null,[p,e("p",null,[h,e("a",u,[b,s(a)]),m]),g,e("p",null,[k,e("a",v,[f,s(a)]),y]),w,e("p",null,[x,e("a",_,[P,s(a)]),C]),T,e("p",null,[S,e("a",q,[U,s(a)]),M]),D,I],64)}var V=i(l,[["render",B]]);export{V as default};
